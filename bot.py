import os
import io
import asyncio
from typing import List
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from checker import check_usernames

BOT_TOKEN = os.getenv("BOT_TOKEN", "")

HELP_TEXT = (
    "ü§ñ *TikTok Live/Die Checker*\n"
    "‚Ä¢ /start ‚Äî th√¥ng tin bot\n"
    "‚Ä¢ /help ‚Äî h∆∞·ªõng d·∫´n\n"
    "‚Ä¢ /check <username...> ‚Äî ki·ªÉm nhanh 1 ho·∫∑c nhi·ªÅu username (c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng). V√≠ d·ª•:\n"
    "  `/check vuthanh_99 tiktok @sontungmtp`\n"
    "‚Ä¢ G·ª≠i *file .txt* ch·ª©a danh s√°ch username (m·ªói d√≤ng 1 username) ƒë·ªÉ ki·ªÉm h√†ng lo·∫°t.\n"
    "\nK·∫øt qu·∫£ g·ªìm 3 nh√≥m: `live`, `banned`, `error`."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o b·∫°n! G·ª≠i l·ªánh /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.\n"
        "B·∫°n c√≥ th·ªÉ /check ngay ho·∫∑c upload file .txt (m·ªói d√≤ng 1 username)."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_markdown_v2(HELP_TEXT)

def _chunk_list(lst: List[str], size: int = 1000):
    for i in range(0, len(lst), size):
        yield lst[i:i+size]

async def _send_results(update: Update, buckets, filename_prefix="results"):
    live, banned, error = buckets.get("live", []), buckets.get("banned", []), buckets.get("error", [])
    summary = (
        f"‚úÖ *K·∫øt qu·∫£:*\n"
        f"‚Ä¢ Live: {len(live)}\n"
        f"‚Ä¢ Banned: {len(banned)}\n"
        f"‚Ä¢ Error: {len(error)}"
    )
    await update.message.reply_markdown_v2(summary)

    # G·ª≠i file txt n·∫øu c√≥ n·ªôi dung
    files = []
    for name, data in [("live", live), ("banned", banned), ("error", error)]:
        if data:
            buf = io.StringIO("\n".join(data))
            files.append(InputFile(
                io.BytesIO(buf.getvalue().encode("utf-8")), filename=f"{filename_prefix}_{name}.txt"
            ))

    # Telegram ch·ªâ cho attach 1-by-1 theo API n√†y; g·ª≠i l·∫ßn l∆∞·ª£t
    for f in files:
        await update.message.reply_document(document=f)

async def check_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 username. V√≠ d·ª•: /check tiktok @sontungmtp")
        return
    usernames = context.args
    await update.message.reply_text("‚è≥ ƒêang ki·ªÉm tra, vui l√≤ng ƒë·ª£i...")
    buckets = await asyncio.to_thread(check_usernames, usernames, 5, 10.0)
    await _send_results(update, buckets, filename_prefix="check")

async def handle_text_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc or not doc.file_name.lower().endswith(".txt"):
        return
    await update.message.reply_text("üì• ƒêang t·∫£i file v√† x·ª≠ l√Ω...")
    file = await doc.get_file()
    b = await file.download_as_bytearray()
    content = b.decode("utf-8", errors="ignore")
    usernames = [line.strip() for line in content.splitlines() if line.strip()]
    if not usernames:
        await update.message.reply_text("File tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return
    buckets = await asyncio.to_thread(check_usernames, usernames, 5, 10.0)
    await _send_results(update, buckets, filename_prefix=os.path.splitext(doc.file_name)[0])

def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùå Ch∆∞a c·∫•u h√¨nh BOT_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng.")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("check", check_cmd))
    app.add_handler(MessageHandler(filters.Document.TEXT, handle_text_file))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()